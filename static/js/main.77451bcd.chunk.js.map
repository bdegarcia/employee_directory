{"version":3,"sources":["utils/Emp_Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","console","log","searchedSorted","employees","filter","employee","firstName","lastName","toLowerCase","includes","search","sort","a","b","x","y","className","scope","map","person","email","phone","id","App","useState","setSearch","setSort","style","marginBottom","htmlFor","onChange","event","target","value","placeholder","type","name","checked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.77451bcd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Card(props) {\r\n  console.log(props);\r\n  const searchedSorted = props.employees.filter( employee => (employee.firstName + \" \" + employee.lastName).toLowerCase().includes(props.search.toLowerCase())).sort( (a,b) => {\r\n    let x = (a.firstName + a.lastName).toLowerCase();\r\n    let y = (b.firstName + b.lastName).toLowerCase();\r\n    if (props.sort === \"asc\") {\r\n        if (x < y) return -1;\r\n        if (x > y) return 1;\r\n    } else {\r\n        if (x > y) return -1;\r\n        if (x < y) return 1;\r\n    }\r\n    return 0;\r\n});\r\n  return (\r\n    <table className=\"table\">\r\n      <thead className=\"thead-dark\">\r\n        <tr>\r\n          <th scope=\"col\">First Name</th>\r\n          <th scope=\"col\">Last name</th>\r\n          <th scope=\"col\">Email</th>\r\n          <th scope=\"col\">Phone</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {searchedSorted.map((person) => (\r\n            <tr>\r\n          <th>{person.firstName}</th>\r\n          <th>{person.lastName}</th>\r\n          <th>{person.email}</th>\r\n          <th>{person.phone}</th>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n// import employees from \"./utils/employees\"\nimport Card from \"./utils/Emp_Card\";\n\nconst employees = [\n  {\n    id: 9,\n    firstName: \"Isabelle\",\n    lastName: \"Baker\",\n    phone: \"847-555-6628\",\n    email: \"ibaker@realfakedoors.com\",\n  },\n  {\n    id: 1,\n    firstName: \"Adam\",\n    lastName: \"Jackson\",\n    phone: \"847-555-6620\",\n    email: \"ajackson@realfakedoors.com\",\n  },\n  {\n    id: 3,\n    firstName: \"Charles\",\n    lastName: \"Hoffman\",\n    phone: \"847-555-6622\",\n    email: \"choffman@realfakedoors.com\",\n  },\n  {\n    id: 5,\n    firstName: \"Ericka\",\n    lastName: \"Fuller\",\n    phone: \"847-555-6624\",\n    email: \"efuller@realfakedoors.com\",\n  },\n  {\n    id: 4,\n    firstName: \"Devona\",\n    lastName: \"Giffin\",\n    phone: \"847-555-6623\",\n    email: \"dgriffin@realfakedoors.com\",\n  },\n  {\n    id: 6,\n    firstName: \"Frank\",\n    lastName: \"Elliot\",\n    phone: \"847-555-6625\",\n    email: \"felliot@realfakedoors.com\",\n  },\n  {\n    id: 8,\n    firstName: \"Harold\",\n    lastName: \"Carter\",\n    phone: \"847-555-6627\",\n    email: \"hcarter@realfakedoors.com\",\n  },\n  {\n    id: 7,\n    firstName: \"Guy\",\n    lastName: \"Dixon\",\n    phone: \"  847-555-6626\",\n    email: \"gdixon@realfakedoors.com\",\n  },\n  {\n    id: 10,\n    firstName: \"Jill\",\n    lastName: \"Avila\",\n    phone: \"847-555-6629\",\n    email: \"javila@realfakedoors.com\",\n  },\n  {\n    id: 2,\n    firstName: \"Beth\",\n    lastName: \"Iverson\",\n    phone: \"847-555-6621\",\n    email: \"biverson@realfakedoors.com\",\n  },\n];\n\nfunction App() {\n  const [search, setSearch] = useState(\"\");\n  const [sort, setSort] = useState(\"ascending\");\n\n  return (\n    <div className=\"body\">\n      <div className=\"jumbotron jumbotron-fluid text-center header\" style={{marginBottom: 0}}>\n        <h1>Real Fake Doors Employee Directory</h1>\n        <form className=\"search-div\">\n          <div className=\"search form-group form-inline d-flex justify-content-center\">\n            <label htmlFor=\"search\">Search Name:</label>\n            <input\n              id=\"search\"\n              onChange={(event) => setSearch(event.target.value)}\n              placeholder=\"Frank Elliot\"\n            />\n          </div>\n          <div className=\"sort form-group form-inline d-flex justify-content-center\">\n            <label>Sort Name:</label>\n            <label className=\"radio-inline\">\n              <input\n                type=\"radio\"\n                name=\"sort\"\n                value=\"asc\"\n                checked={sort === \"asc\"}\n                onChange={(event) => setSort(event.target.value)}\n              />\n              Ascending\n            </label>\n            <label className=\"radio-inline\">\n              <input\n                type=\"radio\"\n                name=\"sort\"\n                value=\"desc\"\n                checked={sort === \"desc\"}\n                onChange={(event) => setSort(event.target.value)}\n              />\n              Descending\n            </label>\n          </div>\n        </form>\n      </div>\n\n      <Card employees={employees} search={search} sort={sort} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}